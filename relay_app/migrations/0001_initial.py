# Generated by Django 3.1.5 on 2021-05-05 11:46

from django.db import migrations, models
import django.db.models.deletion
import relay_app.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BotConfig',
            fields=[
                ('id', models.CharField(choices=[('TELEGRAM_TOKEN', 'Telegram bot token'), ('ALLOWED_CLIENTS', 'Allowed id (separated by commas)')], help_text='Param name', max_length=40, primary_key=True, serialize=False, verbose_name='Name')),
                ('value', models.CharField(help_text='Param value', max_length=400, verbose_name='Value')),
            ],
            options={
                'verbose_name': 'Telegram bot config',
                'verbose_name_plural': 'Telegram bot configs',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='PinData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_id', models.PositiveIntegerField(help_text='For ordering in list', unique=True, verbose_name='Index number')),
                ('board_num', models.IntegerField(choices=[(3, 'BOARD-3'), (5, 'BOARD-5'), (8, 'BOARD-8'), (10, 'BOARD-10'), (11, 'BOARD-11'), (12, 'BOARD-12'), (13, 'BOARD-13'), (15, 'BOARD-15'), (16, 'BOARD-16'), (18, 'BOARD-18'), (19, 'BOARD-19'), (21, 'BOARD-21'), (22, 'BOARD-22'), (23, 'BOARD-23'), (24, 'BOARD-24'), (26, 'BOARD-26'), (29, 'BOARD-29'), (31, 'BOARD-31'), (32, 'BOARD-32'), (33, 'BOARD-33'), (35, 'BOARD-35'), (36, 'BOARD-36'), (37, 'BOARD-37'), (38, 'BOARD-38'), (40, 'BOARD-40')], help_text='GPIO BOARD numbering', unique=True, verbose_name='Pin num (BOARD)')),
                ('command', models.CharField(help_text='For example, "Light in the kitchen"', max_length=30, unique=True, verbose_name='Switch name')),
                ('comment', models.CharField(blank=True, help_text='Optional field', max_length=250, null=True, verbose_name='Comment')),
                ('state', models.BooleanField(default=False, help_text='On or off', verbose_name='Current state')),
                ('visible', models.BooleanField(default=True, help_text='Display in interfaces? (GPIO pin is initialized anyway)', verbose_name='Active')),
            ],
            options={
                'verbose_name': 'Pin config',
                'verbose_name_plural': '  Pin configs',
                'ordering': ['order_id'],
            },
        ),
        migrations.CreateModel(
            name='TemperConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('compare_data', models.CharField(choices=[('t_greater', 'при температуре более чем'), ('t_less', 'при температуре менее чем'), ('h_greater', 'при влажности более чем'), ('h_less', 'при влажности менее чем')], help_text='Сравнение показателя', max_length=10, verbose_name='Сравнение')),
                ('num_data', models.SmallIntegerField(help_text='Значение параметра (градусы цельсия или проценты влажности)', verbose_name='Значение')),
                ('reverse', models.BooleanField(default=False, help_text='Для "Включать при температуре менее чем 18 градусов", при повышении выше 18 градусов выполнит обратное действие - выключит.', verbose_name='Иначе выполнять обратное')),
                ('action', models.PositiveSmallIntegerField(choices=[(1, 'Включать'), (0, 'Выключать')], help_text='Действие с переключателем', verbose_name='Действие')),
                ('active', models.BooleanField(default=True, help_text='Активна ли эта задача', verbose_name='Активно')),
                ('cron_time', models.CharField(blank=True, default=None, help_text='Нотация Cron, удобно составлять <a href="https://crontab.guru/" target="blank">здесь</a>', max_length=100, null=True, validators=[relay_app.validators.validate_cron], verbose_name='Время срабатывания')),
                ('describe_cron', models.CharField(blank=True, default=None, max_length=200, null=True, verbose_name='Описание времени выполнения')),
                ('pin_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tempers', to='relay_app.pindata', verbose_name='Переключатель')),
            ],
            options={
                'verbose_name': 'Настройка задачи по датчику',
                'verbose_name_plural': ' Настройки задач по датчику',
                'ordering': ['pin_data'],
            },
        ),
        migrations.CreateModel(
            name='ScheduleConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cron_time', models.CharField(default='* * * * *', help_text='Нотация Cron, удобно составлять <a href="https://crontab.guru/" target="blank">здесь</a>', max_length=100, validators=[relay_app.validators.validate_cron], verbose_name='Время срабатывания')),
                ('describe_cron', models.CharField(default='Каждую минуту', max_length=200, verbose_name='Описание времени выполнения')),
                ('action', models.PositiveSmallIntegerField(choices=[(1, 'Включать'), (0, 'Выключать'), (2, 'Переключать')], help_text='Действие с переключателем', verbose_name='Действие')),
                ('active', models.BooleanField(default=True, help_text='Активна ли эта задача', verbose_name='Активно')),
                ('comment', models.CharField(blank=True, max_length=200, null=True, verbose_name='Комментарий')),
                ('pin_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='relay_app.pindata', verbose_name='Переключатель')),
            ],
            options={
                'verbose_name': 'Настройка задачи по таймеру',
                'verbose_name_plural': ' Настройки задач по таймеру',
                'ordering': ['pin_data'],
            },
        ),
    ]
